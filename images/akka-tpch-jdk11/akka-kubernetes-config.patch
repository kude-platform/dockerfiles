diff --git a/pom.xml b/pom.xml
index c9c493c..471b3e8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -128,2 +128,3 @@
 						<configuration>
+							<finalName>app</finalName>
 							<transformers>
diff --git a/src/main/java/de/ddm/Main.java b/src/main/java/de/ddm/Main.java
index 5592a53..f4138ad 100644
--- a/src/main/java/de/ddm/Main.java
+++ b/src/main/java/de/ddm/Main.java
@@ -25,5 +25,2 @@ public class Main {
 
-			waitForInput(">>> Press ENTER to exit <<<");
-
-			guardian.tell(new Guardian.ShutdownMessage());
 		}
diff --git a/src/main/java/de/ddm/actors/Guardian.java b/src/main/java/de/ddm/actors/Guardian.java
index 2a3d378..263b88d 100644
--- a/src/main/java/de/ddm/actors/Guardian.java
+++ b/src/main/java/de/ddm/actors/Guardian.java
@@ -69,2 +69,3 @@ public class Guardian extends AbstractBehavior<Guardian.Message> {
 		this.reaper = context.spawn(Reaper.create(), Reaper.DEFAULT_NAME);
+		de.ddm.singletons.ReaperSingleton.set(this.reaper);
 		this.master = this.isMaster() ? context.spawn(Master.create(), Master.DEFAULT_NAME) : null;
diff --git a/src/main/java/de/ddm/actors/Master.java b/src/main/java/de/ddm/actors/Master.java
index 8fa9176..666a4ef 100644
--- a/src/main/java/de/ddm/actors/Master.java
+++ b/src/main/java/de/ddm/actors/Master.java
@@ -45,2 +45,15 @@ public class Master extends AbstractBehavior<Master.Message> {
 		super(context);
+		try {
+			if(context.getSelf() == null){
+				System.out.println("Context self is null, sleeping for a second to workaround lazy initialization");
+				Thread.sleep(1000); // Sleep for a second to workaround context.getSelf() returning null
+			} else if (de.ddm.singletons.ReaperSingleton.get() == null) {
+				System.out.println("Reaper is null, sleeping for a second to workaround lazy initialization");
+				Thread.sleep(1000); // Sleep for a second to workaround ReaperSingleton.get() returning null
+			} else {
+				System.out.println("Worker actor created with path: " + context.getSelf().path().toString());
+			}
+		} catch (InterruptedException e) {
+			throw new RuntimeException(e);
+		}
 		Reaper.watchWithDefaultReaper(this.getContext().getSelf());
diff --git a/src/main/java/de/ddm/actors/Worker.java b/src/main/java/de/ddm/actors/Worker.java
index a3584c8..66cf8f1 100644
--- a/src/main/java/de/ddm/actors/Worker.java
+++ b/src/main/java/de/ddm/actors/Worker.java
@@ -44,2 +44,15 @@ public class Worker extends AbstractBehavior<Worker.Message> {
 		super(context);
+		try {
+			if(context.getSelf() == null){
+				System.out.println("Context self is null, sleeping for a second to workaround lazy initialization");
+				Thread.sleep(1000); // Sleep for a second to workaround context.getSelf() returning null
+			} else if (de.ddm.singletons.ReaperSingleton.get() == null) {
+				System.out.println("Reaper is null, sleeping for a second to workaround lazy initialization");
+				Thread.sleep(1000); // Sleep for a second to workaround ReaperSingleton.get() returning null
+			} else {
+				System.out.println("Worker actor created with path: " + context.getSelf().path().toString());
+			}
+		} catch (InterruptedException e) {
+			throw new RuntimeException(e);
+		}
 		Reaper.watchWithDefaultReaper(this.getContext().getSelf());
diff --git a/src/main/java/de/ddm/configuration/Command.java b/src/main/java/de/ddm/configuration/Command.java
index 61585ef..18f9deb 100644
--- a/src/main/java/de/ddm/configuration/Command.java
+++ b/src/main/java/de/ddm/configuration/Command.java
@@ -15,2 +15,5 @@ public abstract class Command {
 
+	@Parameter(names = {"-ia", "--ipAddress"}, description = "This machine's IP that we use to bind this application against", required = false)
+	String ipAddress = SystemConfigurationSingleton.get().getIpAddress();
+
 	@Parameter(names = {"-p", "--port"}, description = "This machines port that we use to bind this application against", required = false)
@@ -18,2 +21,5 @@ public abstract class Command {
 
+	@Parameter(names = {"-kb", "--runningInKubernetes"}, description = "The application is running in Kubernetes", required = false, arity = 1)
+	boolean runningInKubernetes = SystemConfigurationSingleton.get().isRunningInKubernetes();
+
 	@Parameter(names = {"-w", "--numWorkers"}, description = "The number of workers (indexers/validators) to start locally; should be at least one if the algorithm is started standalone (otherwise there are no workers to run the discovery)", required = false)
diff --git a/src/main/java/de/ddm/configuration/SystemConfiguration.java b/src/main/java/de/ddm/configuration/SystemConfiguration.java
index c41e726..b324a2f 100644
--- a/src/main/java/de/ddm/configuration/SystemConfiguration.java
+++ b/src/main/java/de/ddm/configuration/SystemConfiguration.java
@@ -26,2 +26,4 @@ public class SystemConfiguration {
 
+	private String ipAddress = getDefaultHost();            // The IP address of this machine
+
 	private String actorSystemName = "ddm";            // The name of this application
@@ -34,2 +36,4 @@ public class SystemConfiguration {
 
+	private boolean runningInKubernetes = false;        // The application is running in Kubernetes
+
 	private static String getDefaultHost() {
@@ -46,2 +50,3 @@ public class SystemConfiguration {
 		this.port = commandMaster.port;
+		this.ipAddress = commandMaster.ipAddress;
 		this.masterHost = commandMaster.host;
@@ -51,2 +56,3 @@ public class SystemConfiguration {
 		this.hardMode = commandMaster.hardMode;
+		this.runningInKubernetes = commandMaster.runningInKubernetes;
 	}
@@ -57,2 +63,3 @@ public class SystemConfiguration {
 		this.port = commandWorker.port;
+		this.ipAddress = commandWorker.ipAddress;
 		this.masterHost = commandWorker.masterhost;
@@ -60,2 +67,3 @@ public class SystemConfiguration {
 		this.numWorkers = commandWorker.numWorkers;
+		this.runningInKubernetes = commandWorker.runningInKubernetes;
 	}
@@ -64,6 +72,10 @@ public class SystemConfiguration {
 		return ConfigFactory.parseString("" +
-				"akka.remote.artery.canonical.hostname = \"" + this.host + "\"\n" +
-				"akka.remote.artery.canonical.port = " + this.port + "\n" +
-				"akka.cluster.roles = [" + this.role + "]\n" +
-				"akka.cluster.seed-nodes = [\"akka://" + this.actorSystemName + "@" + this.masterHost + ":" + this.masterPort + "\"]")
+						"akka.remote.artery.canonical.hostname = \"" + this.host + "\"\n" +
+						"akka.remote.artery.canonical.port = " + this.port + "\n" +
+						(this.runningInKubernetes ?
+								"akka.remote.artery.bind.hostname = \"" + this.ipAddress + "\"\n" +
+										"akka.remote.artery.bind.port = " + this.port + "\n" : "" ) +
+						"akka.logger-startup-timeout = 60s\n" +
+						"akka.cluster.roles = [" + this.role + "]\n" +
+						"akka.cluster.seed-nodes = [\"akka://" + this.actorSystemName + "@" + this.masterHost + ":" + this.masterPort + "\"]")
 				.withFallback(ConfigFactory.load("application"));
