diff --git a/pom.xml b/pom.xml
index c9c493c..471b3e8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -126,6 +126,7 @@
 							<goal>shade</goal>
 						</goals>
 						<configuration>
+							<finalName>app</finalName>
 							<transformers>
 								<transformer
 									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
diff --git a/src/main/java/de/ddm/Main.java b/src/main/java/de/ddm/Main.java
index 5592a53..06b25cc 100644
--- a/src/main/java/de/ddm/Main.java
+++ b/src/main/java/de/ddm/Main.java
@@ -23,9 +23,10 @@ public class Main {
 
 			guardian.tell(new Guardian.StartMessage());
 
-			waitForInput(">>> Press ENTER to exit <<<");
-
-			guardian.tell(new Guardian.ShutdownMessage());
+			if (!config.isRunningInKubernetes()) {
+				waitForInput(">>> Press ENTER to exit <<<");
+				guardian.tell(new Guardian.ShutdownMessage());
+			}
 		}
 	}
 
diff --git a/src/main/java/de/ddm/actors/Master.java b/src/main/java/de/ddm/actors/Master.java
index 8fa9176..e375ed4 100644
--- a/src/main/java/de/ddm/actors/Master.java
+++ b/src/main/java/de/ddm/actors/Master.java
@@ -11,7 +11,9 @@ import de.ddm.actors.patterns.Reaper;
 import de.ddm.actors.profiling.DependencyMiner;
 import de.ddm.serialization.AkkaSerializable;
 import lombok.NoArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
 
+@Slf4j
 public class Master extends AbstractBehavior<Master.Message> {
 
 	////////////////////
@@ -43,6 +45,16 @@ public class Master extends AbstractBehavior<Master.Message> {
 
 	private Master(ActorContext<Message> context) {
 		super(context);
+		try {
+			if(context.getSelf() == null){
+				log.warn("Context self is null, sleeping for a second to workaround lazy initialization");
+				Thread.sleep(1000); // Sleep for a second to workaround context.getSelf() returning null
+			} else {
+				log.info("Worker actor created with path: " + context.getSelf().path().toString());
+			}
+		} catch (InterruptedException e) {
+			throw new RuntimeException(e);
+		}
 		Reaper.watchWithDefaultReaper(this.getContext().getSelf());
 
 		this.dependencyMiner = context.spawn(
diff --git a/src/main/java/de/ddm/actors/Worker.java b/src/main/java/de/ddm/actors/Worker.java
index a3584c8..161d333 100644
--- a/src/main/java/de/ddm/actors/Worker.java
+++ b/src/main/java/de/ddm/actors/Worker.java
@@ -12,10 +12,12 @@ import de.ddm.actors.profiling.DependencyWorker;
 import de.ddm.serialization.AkkaSerializable;
 import de.ddm.singletons.SystemConfigurationSingleton;
 import lombok.NoArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
 
 import java.util.ArrayList;
 import java.util.List;
 
+@Slf4j
 public class Worker extends AbstractBehavior<Worker.Message> {
 
 	////////////////////
@@ -42,6 +44,16 @@ public class Worker extends AbstractBehavior<Worker.Message> {
 
 	private Worker(ActorContext<Message> context) {
 		super(context);
+		try {
+			if(context.getSelf() == null){
+				log.warn("Context self is null, sleeping for a second to workaround lazy initialization");
+				Thread.sleep(1000); // Sleep for a second to workaround context.getSelf() returning null
+			} else {
+				log.info("Worker actor created with path: " + context.getSelf().path().toString());
+			}
+		} catch (InterruptedException e) {
+			throw new RuntimeException(e);
+		}
 		Reaper.watchWithDefaultReaper(this.getContext().getSelf());
 
 		final int numWorkers = SystemConfigurationSingleton.get().getNumWorkers();
diff --git a/src/main/java/de/ddm/configuration/Command.java b/src/main/java/de/ddm/configuration/Command.java
index 61585ef..18f9deb 100644
--- a/src/main/java/de/ddm/configuration/Command.java
+++ b/src/main/java/de/ddm/configuration/Command.java
@@ -13,9 +13,15 @@ public abstract class Command {
 	@Parameter(names = {"-h", "--host"}, description = "This machine's host name or IP that we use to bind this application against", required = false)
 	String host = SystemConfigurationSingleton.get().getHost();
 
+	@Parameter(names = {"-ia", "--ipAddress"}, description = "This machine's IP that we use to bind this application against", required = false)
+	String ipAddress = SystemConfigurationSingleton.get().getIpAddress();
+
 	@Parameter(names = {"-p", "--port"}, description = "This machines port that we use to bind this application against", required = false)
 	int port = this.getDefaultPort();
 
+	@Parameter(names = {"-kb", "--runningInKubernetes"}, description = "The application is running in Kubernetes", required = false, arity = 1)
+	boolean runningInKubernetes = SystemConfigurationSingleton.get().isRunningInKubernetes();
+
 	@Parameter(names = {"-w", "--numWorkers"}, description = "The number of workers (indexers/validators) to start locally; should be at least one if the algorithm is started standalone (otherwise there are no workers to run the discovery)", required = false)
 	int numWorkers = SystemConfigurationSingleton.get().getNumWorkers();
 
diff --git a/src/main/java/de/ddm/configuration/SystemConfiguration.java b/src/main/java/de/ddm/configuration/SystemConfiguration.java
index c41e726..a2fc65a 100644
--- a/src/main/java/de/ddm/configuration/SystemConfiguration.java
+++ b/src/main/java/de/ddm/configuration/SystemConfiguration.java
@@ -24,6 +24,8 @@ public class SystemConfiguration {
 	private String masterHost = getDefaultHost();      // The host name or IP of the master; if this is a master, masterHost = host
 	private int masterPort = DEFAULT_MASTER_PORT;      // The port of the master; if this is a master, masterPort = port
 
+	private String ipAddress = getDefaultHost();            // The IP address of this machine
+
 	private String actorSystemName = "ddm";            // The name of this application
 
 	private int numWorkers = 1;                        // The number of workers to start locally; should be at least one if the algorithm is started standalone (otherwise there are no workers to run the application)
@@ -32,6 +34,8 @@ public class SystemConfiguration {
 
 	private boolean hardMode = false;					// Solve the hard version of the task
 
+	private boolean runningInKubernetes = false;        // The application is running in Kubernetes
+
 	private static String getDefaultHost() {
 		try {
 			return InetAddress.getLocalHost().getHostAddress();
@@ -44,28 +48,35 @@ public class SystemConfiguration {
 		this.role = MASTER_ROLE;
 		this.host = commandMaster.host;
 		this.port = commandMaster.port;
+		this.ipAddress = commandMaster.ipAddress;
 		this.masterHost = commandMaster.host;
 		this.masterPort = commandMaster.port;
 		this.numWorkers = commandMaster.numWorkers;
 		this.startPaused = commandMaster.startPaused;
 		this.hardMode = commandMaster.hardMode;
+		this.runningInKubernetes = commandMaster.runningInKubernetes;
 	}
 
 	public void update(CommandWorker commandWorker) {
 		this.role = WORKER_ROLE;
 		this.host = commandWorker.host;
 		this.port = commandWorker.port;
+		this.ipAddress = commandWorker.ipAddress;
 		this.masterHost = commandWorker.masterhost;
 		this.masterPort = commandWorker.masterport;
 		this.numWorkers = commandWorker.numWorkers;
+		this.runningInKubernetes = commandWorker.runningInKubernetes;
 	}
 
 	public Config toAkkaConfig() {
 		return ConfigFactory.parseString("" +
-				"akka.remote.artery.canonical.hostname = \"" + this.host + "\"\n" +
-				"akka.remote.artery.canonical.port = " + this.port + "\n" +
-				"akka.cluster.roles = [" + this.role + "]\n" +
-				"akka.cluster.seed-nodes = [\"akka://" + this.actorSystemName + "@" + this.masterHost + ":" + this.masterPort + "\"]")
+						"akka.remote.artery.canonical.hostname = \"" + this.host + "\"\n" +
+						"akka.remote.artery.canonical.port = " + this.port + "\n" +
+						(this.runningInKubernetes ?
+								"akka.remote.artery.bind.hostname = \"" + this.ipAddress + "\"\n" +
+										"akka.remote.artery.bind.port = " + this.port + "\n" : "" ) +
+						"akka.cluster.roles = [" + this.role + "]\n" +
+						"akka.cluster.seed-nodes = [\"akka://" + this.actorSystemName + "@" + this.masterHost + ":" + this.masterPort + "\"]")
 				.withFallback(ConfigFactory.load("application"));
 	}
 
